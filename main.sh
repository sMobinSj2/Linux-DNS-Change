#! /bin/bash
# This script configures DNS servers on a Linux system.

# Check if the script is run as root
if [ "$EUID" -ne 0 ]; then
  echo "Please run as root"
  exit 1
fi

# Google DNS (default)
DEFAULT_DNS1="8.8.8.8"
DEFAULT_DNS2="8.8.4.4"

# Shecan DNS
shecan_dns1="185.51.200.2"
shecan_dns2="178.22.122.100"

# Cloudflare DNS
cloudflare_dns1="1.1.1.1"
cloudflare_dns2="1.0.0.1"

echo "Choosing DNS servers... (Default: Google DNS)"
echo " # Available DNS options are:"
echo "[1] Default"
echo "[2] Shecan DNS"
echo "[3] Cloudflare DNS"
echo "[4] Custom DNS"
echo "[5] Exit"

read user_input # Read user input for DNS choice
# Check user input and set DNS servers accordingly
if [ "$user_input" == "1" ]; then 
    echo "Using default DNS servers (Google DNS)."
    dns1=$DEFAULT_DNS1
    dns2=$DEFAULT_DNS2
elif [ "$user_input" == "2" ]; then
    echo "Using Shecan DNS servers."
    dns1=$shecan_dns1
    dns2=$shecan_dns2
elif [ "$user_input" == "3" ]; then
    echo "Using Cloudflare DNS servers."
    dns1=$cloudflare_dns1
    dns2=$cloudflare_dns2
elif [ "$user_input" == "4" ]; then
    echo "You chose to enter custom DNS servers."
    echo "Enter your primary DNS server:"
    read dns1
    echo "Enter your secondary DNS server:"
    read dns2
elif [ "$user_input" == "5" ]; then
    echo "Exiting..."
    exit 0
else
    echo "Invalid option. Exiting..."
    exit 1
fi
# Prompt the user for configuration choice
echo "How would you like to configure the DNS servers?"
echo "[t] Temporary (until next reboot)"
echo "[p] Permanent (until changed manually)"


read config_choice

# if the user chose temporary configuration, write to /etc/resolv.conf
if [ "$config_choice" == "t" ]; then
    echo "nameserver ${dns1}" | sudo tee /etc/resolv.conf > /dev/null
    echo "nameserver ${dns2}" | sudo tee -a /etc/resolv.conf > /dev/null
    echo "Temporary DNS servers configured successfully."
    echo "You can verify the changes with 'cat /etc/resolv.conf'."
    echo $(cat /etc/resolv.conf)
    echo "Note: This configuration will be lost after reboot."
    echo "To make it permanent, run the script again and choose permanent configuration."
    exit 0
# If the user chose permanent configuration, change the DNS settings using NetworkManager
elif [ "$config_choice" == "p" ]; then

    # First, disable systemd-resolved if it's running
    if sudo systemctl is-active --quiet systemd-resolved; then
        echo "Disabling systemd-resolved..."
        sudo systemctl stop systemd-resolved
        sudo systemctl disable systemd-resolved
    fi

    # Remove the symlink if it exists
    if [ -L "/etc/resolv.conf" ]; then
        echo "Removing /etc/resolv.conf symlink..."
        if ! sudo rm /etc/resolv.conf; then
            echo "Failed to remove symlink. Check permissions."
            exit 1
        fi
        echo "Successfully removed symlink."
    fi

    # Write DNS servers to /etc/resolv.conf
    echo "# Generated by DNS Change Script" | sudo tee /etc/resolv.conf > /dev/null
    echo "nameserver ${dns1}" | sudo tee -a /etc/resolv.conf > /dev/null
    echo "nameserver ${dns2}" | sudo tee -a /etc/resolv.conf > /dev/null

    connection_name=$(sudo nmcli -t -f NAME connection show --active | head -n1) # Get the name of the active network connection
    if [ -z "$connection_name" ]; then # Check if the connection name is empty
        echo "No active network connection found. Exiting..."
        exit 1
    fi

    # Configure NetworkManager DNS settings
    echo "Configuring DNS servers for connection: $connection_name"
    if ! sudo nmcli connection modify "$connection_name" ipv4.dns "$dns1,$dns2"; then # Attempt to set the DNS servers permanently
        echo "Failed to set DNS servers. Exiting..."
        exit 1
    else
        echo "DNS servers configured successfully."
    fi
    
    # Disable automatic DNS from DHCP
    if ! sudo nmcli connection modify "$connection_name" ipv4.ignore-auto-dns yes; then # Set ignore-auto-dns to yes to prevent automatic DNS from being set by DHCP
        echo "Failed to set ignore-auto-dns. Exiting..."
        exit 1
    else
        echo "Auto-DNS ignore setting configured successfully."
    fi

    # Set DNS priority to manual (100 is standard for user-configured DNS)
    if ! sudo nmcli connection modify "$connection_name" ipv4.dns-priority 100; then
        echo "Failed to set DNS priority. Check NetworkManager status and permissions."
        exit 1
    fi
    echo "DNS priority set successfully to 100."

    # Restart the NetworkManager to apply changes
    if ! sudo systemctl restart NetworkManager; then
        echo "Failed to restart NetworkManager. Please restart it manually to apply changes."
    fi

    sleep 2

    # Bring the connection up
    echo "Bringing the connection up..." 
    if ! sudo nmcli connection up "$connection_name"; then
        echo "Failed to bring connection up. Exiting..."
        exit 1
    else
        echo "Connection brought up successfully."
        echo "DNS configuration completed successfully!"
        echo "You can verify the changes with:"
        echo "1. nmcli connection show $connection_name | grep dns"
        echo $(nmcli connection show "$connection_name" | grep dns)
        echo "2. cat /etc/resolv.conf"
        echo $(cat /etc/resolv.conf)
        exit 0
    fi
else
    echo "Invalid choice. Exiting..."
    exit 1
fi
# End of script